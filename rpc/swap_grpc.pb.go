// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: swap.proto

package rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SwapClient is the client API for Swap service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SwapClient interface {
	InitSwap(ctx context.Context, in *InitSwapRequest, opts ...grpc.CallOption) (*InitSwapResponse, error)
}

type swapClient struct {
	cc grpc.ClientConnInterface
}

func NewSwapClient(cc grpc.ClientConnInterface) SwapClient {
	return &swapClient{cc}
}

func (c *swapClient) InitSwap(ctx context.Context, in *InitSwapRequest, opts ...grpc.CallOption) (*InitSwapResponse, error) {
	out := new(InitSwapResponse)
	err := c.cc.Invoke(ctx, "/swap.Swap/InitSwap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SwapServer is the server API for Swap service.
// All implementations must embed UnimplementedSwapServer
// for forward compatibility
type SwapServer interface {
	InitSwap(context.Context, *InitSwapRequest) (*InitSwapResponse, error)
	mustEmbedUnimplementedSwapServer()
}

// UnimplementedSwapServer must be embedded to have forward compatible implementations.
type UnimplementedSwapServer struct {
}

func (UnimplementedSwapServer) InitSwap(context.Context, *InitSwapRequest) (*InitSwapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitSwap not implemented")
}
func (UnimplementedSwapServer) mustEmbedUnimplementedSwapServer() {}

// UnsafeSwapServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SwapServer will
// result in compilation errors.
type UnsafeSwapServer interface {
	mustEmbedUnimplementedSwapServer()
}

func RegisterSwapServer(s grpc.ServiceRegistrar, srv SwapServer) {
	s.RegisterService(&Swap_ServiceDesc, srv)
}

func _Swap_InitSwap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitSwapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SwapServer).InitSwap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/swap.Swap/InitSwap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SwapServer).InitSwap(ctx, req.(*InitSwapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Swap_ServiceDesc is the grpc.ServiceDesc for Swap service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Swap_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "swap.Swap",
	HandlerType: (*SwapServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InitSwap",
			Handler:    _Swap_InitSwap_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "swap.proto",
}
