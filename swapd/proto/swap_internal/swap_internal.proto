syntax = "proto3";
package swap_internal;

service SwapManager {
    rpc AddAddressFilters (AddAddressFiltersRequest) returns (AddAddressFiltersResponse) {}
    rpc GetInfo (GetInfoRequest) returns (GetInfoResponse) {}
    rpc GetSwap (GetSwapRequest) returns (GetSwapResponse) {}
    rpc ListClaimable (ListClaimableRequest) returns (ListClaimableResponse) {}
    rpc Claim(ClaimRequest) returns (ClaimResponse) {}
    rpc Stop (StopRequest) returns (StopResponse) {}
}

message AddAddressFiltersRequest {
    repeated string addresses = 1;
}

message AddAddressFiltersResponse {}

message GetInfoRequest {}
message GetInfoResponse {
    uint64 block_height = 1;
    string network = 2;
}

message GetSwapRequest {
    optional string address = 1;
    optional string payment_request = 2;
    optional bytes payment_hash = 3;
}
message GetSwapResponse {
    string address = 1;
    uint64 creation_time = 2;
    string payment_hash = 3;
    repeated SwapOutput outputs = 4;
    uint32 lock_time = 5;
    repeated SwapLock active_locks = 6;
    repeated PaymentAttempt payment_attempts = 7;
}
message SwapOutput {
    string outpoint = 1;
    uint64 confirmation_height = 2;
    string block_hash = 3;
    optional SwapOutputSpend spend = 4;
}
message SwapOutputSpend {
    uint32 input_index = 1;
    string txid = 2;
    SpendType spend_type = 3;
    uint64 confirmation_height = 4;
    string block_hash = 5;
}
message SwapLock {
    optional string payment_attempt_label = 1;
    optional string refund_id = 2;
}
message PaymentAttempt {
    string payment_request = 1;
    uint64 amount_msat = 2;
    optional string error = 3;
    uint64 creation_time = 4;
    repeated string outpoints = 5;
    string label = 6;
    bool success = 7;
    bool pending = 8;
}

enum SpendType {
    UNKNOWN = 0;
    CLAIM = 1;
    COOPERATIVE_REFUND = 2;
    UNILATERAL_REFUND = 3;
}

message ListClaimableRequest {}
message ListClaimableResponse {
    repeated ClaimableUtxo claimables = 1;
}

message ClaimableUtxo {
    string outpoint = 1;
    string swap_hash = 2;
    uint32 lock_time = 3;
    uint64 confirmation_height = 4;
    string block_hash = 5;
    int32 blocks_left = 6;
    optional string paid_with_request = 7;
}

message ClaimRequest {
    repeated string outpoints = 1;
    optional string destination_address = 2;
    optional uint32 fee_per_kw = 3;
    bool auto_bump = 4;
}
message ClaimResponse {
    string tx_id = 1;
    uint32 fee_per_kw = 2;
}

message StopRequest {}
message StopResponse {}