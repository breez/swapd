# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import swap_internal_pb2 as swap__internal__pb2

GRPC_GENERATED_VERSION = '1.66.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in swap_internal_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class SwapManagerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.AddAddressFilters = channel.unary_unary(
                '/swap_internal.SwapManager/AddAddressFilters',
                request_serializer=swap__internal__pb2.AddAddressFiltersRequest.SerializeToString,
                response_deserializer=swap__internal__pb2.AddAddressFiltersReply.FromString,
                _registered_method=True)
        self.GetInfo = channel.unary_unary(
                '/swap_internal.SwapManager/GetInfo',
                request_serializer=swap__internal__pb2.GetInfoRequest.SerializeToString,
                response_deserializer=swap__internal__pb2.GetInfoReply.FromString,
                _registered_method=True)
        self.GetSwap = channel.unary_unary(
                '/swap_internal.SwapManager/GetSwap',
                request_serializer=swap__internal__pb2.GetSwapRequest.SerializeToString,
                response_deserializer=swap__internal__pb2.GetSwapReply.FromString,
                _registered_method=True)
        self.Stop = channel.unary_unary(
                '/swap_internal.SwapManager/Stop',
                request_serializer=swap__internal__pb2.StopRequest.SerializeToString,
                response_deserializer=swap__internal__pb2.StopReply.FromString,
                _registered_method=True)


class SwapManagerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def AddAddressFilters(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetInfo(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSwap(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Stop(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SwapManagerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'AddAddressFilters': grpc.unary_unary_rpc_method_handler(
                    servicer.AddAddressFilters,
                    request_deserializer=swap__internal__pb2.AddAddressFiltersRequest.FromString,
                    response_serializer=swap__internal__pb2.AddAddressFiltersReply.SerializeToString,
            ),
            'GetInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.GetInfo,
                    request_deserializer=swap__internal__pb2.GetInfoRequest.FromString,
                    response_serializer=swap__internal__pb2.GetInfoReply.SerializeToString,
            ),
            'GetSwap': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSwap,
                    request_deserializer=swap__internal__pb2.GetSwapRequest.FromString,
                    response_serializer=swap__internal__pb2.GetSwapReply.SerializeToString,
            ),
            'Stop': grpc.unary_unary_rpc_method_handler(
                    servicer.Stop,
                    request_deserializer=swap__internal__pb2.StopRequest.FromString,
                    response_serializer=swap__internal__pb2.StopReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'swap_internal.SwapManager', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('swap_internal.SwapManager', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class SwapManager(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def AddAddressFilters(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/swap_internal.SwapManager/AddAddressFilters',
            swap__internal__pb2.AddAddressFiltersRequest.SerializeToString,
            swap__internal__pb2.AddAddressFiltersReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/swap_internal.SwapManager/GetInfo',
            swap__internal__pb2.GetInfoRequest.SerializeToString,
            swap__internal__pb2.GetInfoReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetSwap(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/swap_internal.SwapManager/GetSwap',
            swap__internal__pb2.GetSwapRequest.SerializeToString,
            swap__internal__pb2.GetSwapReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Stop(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/swap_internal.SwapManager/Stop',
            swap__internal__pb2.StopRequest.SerializeToString,
            swap__internal__pb2.StopReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
